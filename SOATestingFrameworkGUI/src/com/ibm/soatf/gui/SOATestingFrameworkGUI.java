/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ibm.soatf.gui;

import com.ibm.soatf.config._interface.InterfaceFlowPattern;
import com.ibm.soatf.config._interface.SOATestingFrameworkInterfaceConfiguration;
import com.ibm.soatf.config.master.Environment;
import com.ibm.soatf.config.master.ExecutionBlock;
import com.ibm.soatf.config.master.FlowPattern;
import com.ibm.soatf.config.master.Interface;
import com.ibm.soatf.config.master.Operation;
import com.ibm.soatf.config.master.SOATestingFrameworkMasterConfiguration;
import com.ibm.soatf.config.master.TestScenario;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import org.apache.logging.log4j.LogManager;

/**
 *
 * @author zANGETSu
 */
public class SOATestingFrameworkGUI extends javax.swing.JFrame {

    private static final org.apache.logging.log4j.Logger logger = LogManager.getLogger(SOATestingFrameworkGUI.class.getName());

    public static TextAreaOutputStream taOutputStream;

    public static File propertiesFile;
    public static final File SOA_TEST_HOME = new File(getSOATestHome());
    public static final File SOATF_HOME = new File(getSOATFHome());
    public static final String SOA_TEST_HOME_ENV_VAR = "SOA_TEST_HOME";
    public static final String SOATF_HOME_ENV_VAR = "SOATF_HOME";
    public static final String JAXB_CONTEXT_PACKAGE = "com.ibm.soatf.config.master";

    public static final String SOATF_PARRENT_CONFIGURATION_FILE = "SOATestingFrameworkMasterConfiguration.xml";

    private static final SOATestingFrameworkMasterConfiguration soaTFMC = getSOATFMasterConfiguration();
    private static SOATestingFrameworkGUI soatfgui = new SOATestingFrameworkGUI();

    /**
     * Creates new form SOATestingFrameworkGUI
     */
    public SOATestingFrameworkGUI() {

        initComponents();

        taOutputStream = new TextAreaOutputStream(
                jTextArea1, "shell ");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jComboBox1 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = getListOfInterfaces();
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel1.setText("List of configured interfaces");

        jButton1.setText("Execute SOATF Framework for selected interface");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel( getListOfEnvironments() ));

        jButton2.setText("Clear log");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jList2.setName("patterList"); // NOI18N
        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(jList2);

        jList3.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList3ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jList3);

        jLabel2.setText("Patern Execution Blocks");

        jLabel3.setText("Execution Block Step Sequence");

        jScrollPane5.setViewportView(jTree1);

        jLabel4.setText("Interface Test Cases");

        jLabel5.setText("Framework Runtime Log");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86)
                        .addComponent(jButton2)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(1, 1, 1)
                        .addComponent(jLabel5)
                        .addGap(3, 3, 3)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        executeFramework();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.jTextArea1.setText(null);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged

        String myInterfacetoSeek = jList1.getSelectedValue().toString();
        ListIterator<Interface> myInterfaces = soaTFMC.getInterfaces().getInterface().listIterator();
        String pattern = null;
        while (myInterfaces.hasNext()) {
            Interface myInterface = myInterfaces.next();
            if (myInterface.getName().equals(myInterfacetoSeek)) {
                pattern = myInterface.getPatterns().getReferencedFlowPattern().toArray().toString();

            }
        }

        FlowPattern myPatternToSeek;
        ListIterator<TestScenario> sequences = null;
        ListIterator<FlowPattern> myPatterns = soaTFMC.getFlowPatterns().getFlowPattern().listIterator();
        while (myPatterns.hasNext()) {
            myPatternToSeek = myPatterns.next();
            if (pattern.equals(myPatternToSeek.getIdentificator())) {
                sequences = myPatternToSeek.getTestScenario().listIterator();

            }
        }
        DefaultListModel listModel = new DefaultListModel();

        final List<String> sequenceNames = new ArrayList<String>();
        while (sequences.hasNext()) {
            String s = sequences.next().getIdentificator();
            logger.debug("String : " + s);
            listModel.addElement(s);
        }

        jList2.setModel(listModel);
        UpdateJTree(myInterfacetoSeek);

    }//GEN-LAST:event_jList1ValueChanged

    private void jList3ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList3ValueChanged

    }//GEN-LAST:event_jList3ValueChanged

    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        String myExecutionBlocToSeek = jList2.getSelectedValue().toString();
        
        FlowPattern myPatternToSeek;
        ListIterator<FlowPattern> allPatterns = soaTFMC.getFlowPatterns().getFlowPattern().listIterator();
        ListIterator<TestScenario> executionBlocks = null;
        
        ListIterator<ExecutionBlock> operations = null;
        while (allPatterns.hasNext()) {
            myPatternToSeek = allPatterns.next();
            executionBlocks = myPatternToSeek.getTestScenario().listIterator();
            while (executionBlocks.hasNext()){
                TestScenario eb = executionBlocks.next();
                if (eb.getIdentificator().equals(myExecutionBlocToSeek)){
                    operations = eb.getExecutionBlock().listIterator();
                }
            }
        }
        DefaultListModel listModel = new DefaultListModel();

        
        while (operations.hasNext()) {
            String s = operations.next().getIdentificator();
            logger.debug("String : " + s);
            listModel.addElement(s);
        }
        jList3.setModel(listModel);

    }//GEN-LAST:event_jList2ValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SOATestingFrameworkGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SOATestingFrameworkGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SOATestingFrameworkGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SOATestingFrameworkGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {

                soatfgui.setVisible(true);

            }
        });

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList jList1;
    private javax.swing.JList jList2;
    private javax.swing.JList jList3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    private String[] getListOfInterfaces() {
        ListIterator<Interface> i = this.soaTFMC.getInterfaces().getInterface().listIterator();
        List<String> jListInterfaces = new ArrayList<String>();
        while (i.hasNext()) {
            Interface inter = i.next();
            //jListInterfaces.add(inter.getName() + " - " + inter.getPattern());
            jListInterfaces.add(inter.getName());
        }
        return jListInterfaces.toArray(new String[jListInterfaces.size()]);

    }

    private String[] getListOfEnvironments() {

        return new String[]{"dev", "dev2", "dev3", "pre-sit", "sit", "uat", "prod"};
    }

    public static SOATestingFrameworkMasterConfiguration getSOATFMasterConfiguration() {
        JAXBContext jaxbContext;
        Unmarshaller jaxbUnmarshaller;
        JAXBElement<SOATestingFrameworkMasterConfiguration> allMasterJAXBConfig = null;
        SOATestingFrameworkMasterConfiguration soatfmc = null;
        try {

            jaxbContext = JAXBContext.newInstance(SOATestingFrameworkGUI.JAXB_CONTEXT_PACKAGE);
            jaxbUnmarshaller = jaxbContext.createUnmarshaller();
            final File file = new File(SOATestingFrameworkGUI.SOA_TEST_HOME, SOATestingFrameworkGUI.SOATF_PARRENT_CONFIGURATION_FILE).getCanonicalFile();
            allMasterJAXBConfig = (JAXBElement<SOATestingFrameworkMasterConfiguration>) jaxbUnmarshaller.unmarshal(file);
            soatfmc = allMasterJAXBConfig.getValue();

        } catch (JAXBException jaxbex) {
            logger.fatal("Error on unmarshalling master configuration.", jaxbex);
        } catch (IOException ex) {
            logger.fatal("Error on unmarshalling master configuration.", ex);
        } finally {

        }
        return soatfmc;
    }
    public static SOATestingFrameworkInterfaceConfiguration getSOATFInterfaceConfiguration(File file) {
        SOATestingFrameworkInterfaceConfiguration soaTFIConfig = null;
        JAXBContext jaxbContext;
        Unmarshaller jaxbUnmarshaller;
        JAXBElement<SOATestingFrameworkInterfaceConfiguration> allMasterJAXBConfig = null;
        try {

            jaxbContext = JAXBContext.newInstance("com.ibm.soatf.config._interface");
            jaxbUnmarshaller = jaxbContext.createUnmarshaller();
            allMasterJAXBConfig = (JAXBElement<SOATestingFrameworkInterfaceConfiguration>) jaxbUnmarshaller.unmarshal(file);
            soaTFIConfig = allMasterJAXBConfig.getValue();

        } catch (JAXBException jaxbex) {
            logger.fatal("Error on unmarshalling master configuration.", jaxbex);
        } finally {

        }
        return soaTFIConfig;
    }

    private static String getSOATFHome() {
        return System.getenv().get(SOATestingFrameworkGUI.SOATF_HOME_ENV_VAR);
    }

    private static String getSOATestHome() {
        return System.getenv().get(SOATestingFrameworkGUI.SOA_TEST_HOME_ENV_VAR);
    }

    private void executeFramework() {
        try {
            String selected = jList1.getSelectedValue().toString();
            //soatfgui.getContentPane().add(new TextAreaOutputStreamTest(taOutputStream));
            System.setOut(new PrintStream(taOutputStream));
            try {
                List<String> command = new ArrayList<String>();
                command.add("cmd.exe");
                command.add("/C");
                command.add(System.getenv().get("JAVA_HOME") + "\\bin\\java");
                command.add("-jar");
                command.add("c:\\SOATestingFramework\\dist\\SOATestingFramework.jar");

                // execute my command
                SystemCommandExecutor commandExecutor = new SystemCommandExecutor(command);

                int result = commandExecutor.executeCommand();

                // get the output from the command
                StringBuilder stdout = commandExecutor.getStandardOutputFromCommand();
                StringBuilder stderr = commandExecutor.getStandardErrorFromCommand();

                // print the output from the command
                System.out.println("STDOUT");
                System.out.println(stdout);
                //System.out.println("STDERR");
                //System.out.println(stderr);
                String s = null;

                /* 
                 Process p = Runtime.getRuntime().exec("dir");

                 BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));

                 BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()));

                 // read the output from the command
                 System.out.println("Here is the standard output of the command:\n");
                 while ((s = stdInput.readLine()) != null) {
                 System.out.println(s);
                 }

                 // read any errors from the attempted command
                 System.out.println("Here is the standard error of the command (if any):\n");
                 while ((s = stdError.readLine()) != null) {
                 System.out.println(s);
                 }
                 */
            } catch (IOException e) {
                System.out.println("exception happened - here's what I know: ");
                e.printStackTrace();
                System.exit(-1);
            }

        } catch (InterruptedException ex) {
            Logger.getLogger(SOATestingFrameworkGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void UpdateJTree(String myInterfacetoSeek) {
        DefaultMutableTreeNode top = new DefaultMutableTreeNode(myInterfacetoSeek);
        
        /*File configFile = new File(SOATestingFrameworkGUI.SOA_TEST_HOME, myInterfacetoSeek + "\\" + myInterfacetoSeek + ".xml");
        SOATestingFrameworkInterfaceConfiguration soaTFIConfig = getSOATFInterfaceConfiguration(configFile);
        ListIterator<InterfaceFlowPattern> testCaseIterator = soaTFIConfig.getInterfaceFlowPattern().listIterator();
        DefaultMutableTreeNode testCaseNode = null;
        while (testCaseIterator.hasNext()){
            InterfaceFlowPattern testCase = testCaseIterator.next();
            testCaseNode = new DefaultMutableTreeNode(testCase.getName());
            top.add(testCaseNode);
            
            ListIterator<TestCase.ExecutionBlock> executionBlockIterator = testCase.getExecutionBlock().listIterator();
            DefaultMutableTreeNode executionBlockNode = null;
            while (executionBlockIterator.hasNext()){
                TestCase.ExecutionBlock executionBlock = executionBlockIterator.next();
                executionBlockNode = new DefaultMutableTreeNode(executionBlock.getName());
                testCaseNode.add(executionBlockNode);
                DefaultMutableTreeNode targeting = null;
                targeting = new DefaultMutableTreeNode(executionBlock.getSource());
                targeting = new DefaultMutableTreeNode(executionBlock.getTarget());
                executionBlockNode.add(targeting);
                
                
            }
            
        }
        
        DefaultTreeModel dtm = new DefaultTreeModel(top);
        jTree1.setModel(dtm);
        */
        
        
    }

}
