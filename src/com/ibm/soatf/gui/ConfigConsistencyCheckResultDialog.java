/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.ibm.soatf.gui;

import com.ibm.soatf.config.ConfigConsistencyResult;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.WindowConstants;

/**
 *
 * @author user
 */
public class ConfigConsistencyCheckResultDialog extends EscapableDialog {

    private ConfigConsistencyResult result;
    
    /**
     * Creates new form ResultsDetailDialog
     */
    public ConfigConsistencyCheckResultDialog(java.awt.Frame parent, boolean modal, ConfigConsistencyResult result) {
        super(parent, modal);
        initComponents();
        this.result = result;
        additionalInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new JButton();
        jPanel1 = new JPanel();
        jScrollPane1 = new JScrollPane();
        taResultDetails = new JTextArea();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(BorderFactory.createTitledBorder("Result details"));

        taResultDetails.setEditable(false);
        taResultDetails.setColumns(20);
        taResultDetails.setRows(5);
        jScrollPane1.setViewportView(taResultDetails);

        GroupLayout jPanel1Layout = new GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton jButton1;
    private JPanel jPanel1;
    private JScrollPane jScrollPane1;
    private JTextArea taResultDetails;
    // End of variables declaration//GEN-END:variables

    private void additionalInit() {
        Utils.centerOnParent(getParent(), this);
        StringBuilder sb = new StringBuilder();
        sb.append("*****************************************************\n");
        sb.append("*                MESSAGES                            \n");
        sb.append("*****************************************************\n");
        sb.append("\n");
        taResultDetails.append(sb.toString());
        for (String msg : result.getMessages()) {
            taResultDetails.append(msg);
            taResultDetails.append("\n");
        }
        
        sb = new StringBuilder("\n");
        sb.append("*****************************************************\n");
        sb.append("*                MASTER Errors                       \n");
        sb.append("*****************************************************\n");
        sb.append("\n");
        taResultDetails.append(sb.toString());
        for (String msg : result.getMasterErrors()) {
            taResultDetails.append(msg);
            taResultDetails.append("\n");
        }
        
        sb = new StringBuilder("\n");
        sb.append("*****************************************************\n");
        sb.append("*                INTERFACE Errors                    \n");
        sb.append("*****************************************************\n");
        sb.append("\n");
        taResultDetails.append(sb.toString());
        for (String msg : result.getInterfaceErrors()) {
            taResultDetails.append(msg);
            taResultDetails.append("\n");
        }
        
        sb = new StringBuilder("\n");
        sb.append("*****************************************************\n");
        sb.append("*                MASTER Warnings                     \n");
        sb.append("*****************************************************\n");
        sb.append("\n");
        taResultDetails.append(sb.toString());
        for (String msg : result.getMasterWarnings()) {
            taResultDetails.append(msg);
            taResultDetails.append("\n");
        }
        
        sb = new StringBuilder("\n");
        sb.append("*****************************************************\n");
        sb.append("*               INTERFACE Warnings                   \n");
        sb.append("*****************************************************\n");
        sb.append("\n");
        taResultDetails.append(sb.toString());
        for (String msg : result.getInterfaceWarnings()) {
            taResultDetails.append(msg);
            taResultDetails.append("\n");
        }
    }
}
