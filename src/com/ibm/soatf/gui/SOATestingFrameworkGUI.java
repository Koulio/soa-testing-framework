/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ibm.soatf.gui;

import com.ibm.soatf.FrameworkExecutionException;
import com.ibm.soatf.config.ConfigurationManager;
import com.ibm.soatf.config.DirectoryStructureManager;
import com.ibm.soatf.config.FrameworkConfiguration;
import com.ibm.soatf.config.FrameworkConfigurationException;
import com.ibm.soatf.config.InterfaceConfiguration;
import com.ibm.soatf.config.MasterConfiguration;
import com.ibm.soatf.config.iface.IfaceExecBlock;
import com.ibm.soatf.config.iface.IfaceFlowPattern;
import com.ibm.soatf.config.iface.IfaceTestScenario;
import com.ibm.soatf.config.master.ExecutionBlock;
import com.ibm.soatf.config.master.Interface;
import com.ibm.soatf.config.master.Operation;
import com.ibm.soatf.config.master.Project;
import com.ibm.soatf.flow.FlowExecutionEvent;
import com.ibm.soatf.flow.FlowExecutionListener;
import com.ibm.soatf.flow.FlowExecutor;
import com.ibm.soatf.gui.logging.JTextAreaAppender;
import foxtrot.AsyncTask;
import foxtrot.AsyncWorker;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.event.ListSelectionEvent;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author zANGETSu
 */
public class SOATestingFrameworkGUI extends javax.swing.JFrame {

    /**
     * Creates new form SOATestingFrameworkGUI
     */
    
    public SOATestingFrameworkGUI() {
        initComponents();
        
        //The MOST important part for the logging - the JTextArea where the messages will appear
        JTextAreaAppender.setJTextArea(jtaLogging);
        logger.info("GUI created successfully");
        //center the frame on screen
        setLocationRelativeTo(null);
        
        additionalInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings({"unchecked", "Convert2Diamond"})
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnClearLog = new javax.swing.JButton();
        btnExecute = new javax.swing.JButton();
        cbEnvironment = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jSplitPane5 = new javax.swing.JSplitPane();
        jSplitPane6 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jlInterfaces = new javax.swing.JList<GUIObjects.Interface>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        details = new javax.swing.JTree();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtResults = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jtaLogging = new javax.swing.JTextArea();
        chkBoxIgnoreFailures = new javax.swing.JCheckBox();
        btnReloadXMLConfiguration = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnClearLog.setText("Clear Log");
        btnClearLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearLogActionPerformed(evt);
            }
        });

        btnExecute.setText("Execute");
        btnExecute.setEnabled(false);
        btnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteActionPerformed(evt);
            }
        });

        jLabel1.setText("Environment:");

        jSplitPane3.setDividerSize(3);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jSplitPane5.setDividerSize(3);

        jSplitPane6.setDividerLocation(300);
        jSplitPane6.setDividerSize(3);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Interfaces"));

        jlInterfaces.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlInterfaces.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlInterfacesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlInterfaces);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 287, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
        );

        jSplitPane6.setLeftComponent(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Interface Details"));

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        details.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        details.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                detailsValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(details);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jSplitPane6.setRightComponent(jPanel3);

        jSplitPane5.setLeftComponent(jSplitPane6);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));

        jtResults.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Operation", "Message", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jtResults);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
        );

        jSplitPane5.setRightComponent(jPanel4);

        jSplitPane3.setLeftComponent(jSplitPane5);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));

        jtaLogging.setColumns(20);
        jtaLogging.setRows(5);
        jScrollPane6.setViewportView(jtaLogging);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1137, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
        );

        jSplitPane3.setRightComponent(jPanel1);

        chkBoxIgnoreFailures.setText("Ignore failures");

        btnReloadXMLConfiguration.setText("Reload XML Configuration");
        btnReloadXMLConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReloadXMLConfigurationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnClearLog)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnReloadXMLConfiguration)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(chkBoxIgnoreFailures)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbEnvironment, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExecute))
                    .addComponent(jSplitPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExecute)
                    .addComponent(cbEnvironment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnClearLog)
                    .addComponent(chkBoxIgnoreFailures)
                    .addComponent(btnReloadXMLConfiguration))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jlInterfacesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlInterfacesValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }
        interfaceSelection(evt);
    }//GEN-LAST:event_jlInterfacesValueChanged

    private void btnClearLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearLogActionPerformed
        clearLogs();
    }//GEN-LAST:event_btnClearLogActionPerformed

    private void btnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteActionPerformed
        executeFramework();
    }//GEN-LAST:event_btnExecuteActionPerformed

    private void detailsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_detailsValueChanged
//        DefaultMutableTreeNode root = (DefaultMutableTreeNode) details.getModel().getRoot();
//        GUIObjects.Interface iface = (GUIObjects.Interface) root.getUserObject();
//        for (GUIObjects.Interface i : Collections.list(jlInterfacesModel.elements())) {
//            if(i.getWrappedObject().getName().equals(iface.getWrappedObject().getName())) {
//                jlInterfaces.setSelectedValue(i, true);
//            }
//        }
    }//GEN-LAST:event_detailsValueChanged

    private void btnReloadXMLConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReloadXMLConfigurationActionPerformed
       reloadXMLConfiguration();
    }//GEN-LAST:event_btnReloadXMLConfigurationActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearLog;
    private javax.swing.JButton btnExecute;
    private javax.swing.JButton btnReloadXMLConfiguration;
    private javax.swing.JComboBox cbEnvironment;
    private javax.swing.JCheckBox chkBoxIgnoreFailures;
    private javax.swing.JTree details;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JSplitPane jSplitPane6;
    private javax.swing.JList<GUIObjects.Interface> jlInterfaces;
    private javax.swing.JTable jtResults;
    private javax.swing.JTextArea jtaLogging;
    // End of variables declaration//GEN-END:variables

    private FrameworkConfiguration FCFG;
    private MasterConfiguration MCFG;
    private static final Logger logger = LogManager.getLogger(SOATestingFrameworkGUI.class.getName());
    private final DefaultListModel<GUIObjects.Interface> jlInterfacesModel = new DefaultListModel<>();
    private final TableModelResults jtResultsModel = new TableModelResults();
    private final FlowExecutionListener execListener = //<editor-fold defaultstate="collapsed" desc="anonymous inner class definition">
            new FlowExecutionListener() {
                
                @Override
                public void operationStarted(FlowExecutionEvent evt) {
                    addRow(evt);
                }
                
                @Override
                public void operationFinished(FlowExecutionEvent evt) {
                    updateLastRow(evt);
                    jtResults.getColumnModel().getColumn(2).setCellRenderer(new ResultColumnRenderer());
                }
            };
//</editor-fold>
    
    private void additionalInit() {
        ConfigurationManager cfgMgr = ConfigurationManager.getInstance();
        try {
            cfgMgr.init();
            FCFG = cfgMgr.getFrameworkConfig();
            MCFG = cfgMgr.getMasterConfig();
            DirectoryStructureManager.checkFrameworkDirectoryStructure();
        } catch (FrameworkConfigurationException ex) {
            return;
        }
        
        //Interfaces list
        initInterfaces();
        //Environment combobox
        initEnvironments();
        resetInterfaceDetails();
        jtResults.setModel(jtResultsModel);
        jtResults.addMouseListener(new MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                if(e.getClickCount() > 1) {
                    displayResultDetails();
                }
            }
        });
        details.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        
    }
    
    private void initInterfaces() {
        for (Interface iface : MCFG.getInterfaces()) {
            jlInterfacesModel.addElement(new GUIObjects.Interface(iface));
        }
        jlInterfaces.setModel(jlInterfacesModel);
    }

    private String[] getListOfEnvironments() {
        try {
            return MCFG.getAllEnvironments().toArray(new String[0]);
        } catch (FrameworkConfigurationException ex) {
            logger.error("Can't get list of environments from configuration", ex);
            return new String[0];
        }
    }

    private void executeFramework() {
        clearAll();
        FlowExecutor flowExecutor;
        try {
            flowExecutor = buildFlowExecutor();
        } catch (FrameworkConfigurationException ex) {
            logger.error("Can't build flow executor: ", ex);
            return;
        }
        flowExecutor.addFlowExecutionListener(execListener);
        
        AsyncWorker.post(new ExecuteTask(flowExecutor));
    }
    
    private void interfaceSelection(ListSelectionEvent evt) {
        if (jlInterfaces.getSelectedValue() != null) {
            Interface iface = jlInterfaces.getSelectedValue().getWrappedObject();
            updateDetails(new GUIObjects.Interface(iface));
            btnExecute.setEnabled(true);
        } else {
            btnExecute.setEnabled(false);
        }
    }

    private void updateDetails(GUIObjects.Interface iface) {
        final Interface ifaceMasterXML = iface.getWrappedObject();
        String name = ifaceMasterXML.getName();
        final InterfaceConfiguration ICFG;
        try {
            ICFG = MCFG.getInterfaceConfig(name);
        } catch (FrameworkConfigurationException ex) {
            logger.error("Can't load interface details.", ex);
            resetInterfaceDetails();
            return;
        }
        DefaultMutableTreeNode nodeInterface = new DefaultMutableTreeNode(iface);
        DefaultMutableTreeNode nodeProjects = new DefaultMutableTreeNode("SOA Projects");
        for (Project project : ifaceMasterXML.getProjects().getProject()) {
            DefaultMutableTreeNode nodeProject = new DefaultMutableTreeNode(new GUIObjects.Project(project));
            nodeProjects.add(nodeProject);
        }
        nodeInterface.add(nodeProjects);
        DefaultMutableTreeNode nodePatterns = new DefaultMutableTreeNode("Flow Patterns");
        /*for (Interface.Patterns.ReferencedFlowPattern refPattern : ifaceMasterXML.getPatterns().getReferencedFlowPattern()) {
        for (int i = 0; i < refPattern.getOccurrence(); i++) {
        String flowPatternId = refPattern.getIdentificator();
        FlowPattern flowPattern = MCFG.getFlowPattern(flowPatternId);
        DefaultMutableTreeNode nodeFlowPattern = new DefaultMutableTreeNode(new GUIObjects.FlowPattern(flowPattern));
        ICFG.getInterfaceFlowPattern(flowPatternId);
        for (TestScenario testScenario : flowPattern.getTestScenario()) {
        DefaultMutableTreeNode nodeTestScenario = new DefaultMutableTreeNode(new GUIObjects.TestScenario(testScenario));
        for (ExecutionBlock executionBlock : testScenario.getExecutionBlock()) {
        DefaultMutableTreeNode nodeExecutionBlock = new DefaultMutableTreeNode(new GUIObjects.ExecutionBlock(executionBlock));
        for (Operation operation : executionBlock.getOperation()) {
        DefaultMutableTreeNode nodeOperation = new DefaultMutableTreeNode(new GUIObjects.Operation(operation));
        nodeExecutionBlock.add(nodeOperation);
        }
        nodeTestScenario.add(nodeExecutionBlock);
        }
        nodeFlowPattern.add(nodeTestScenario);
        }
        nodePatterns.add(nodeFlowPattern);
        }
        }*/
        List<IfaceFlowPattern> ifaceFlowPatterns;
        try {
            ifaceFlowPatterns = ICFG.getIfaceFlowPatterns();
        } catch (FrameworkConfigurationException ex) {
            logger.error("Can't load interface flow patterns.", ex);
            resetInterfaceDetails();
            return;
        }
        for (IfaceFlowPattern iFlowPattern : ifaceFlowPatterns) {
            DefaultMutableTreeNode nodeInterfaceFlowPattern = new DefaultMutableTreeNode(new GUIObjects.IfaceFlowPattern(iFlowPattern));
            for (IfaceTestScenario iTestScenario : iFlowPattern.getIfaceTestScenario()) {
                DefaultMutableTreeNode nodeInterfaceTestScenario = new DefaultMutableTreeNode(new GUIObjects.InterfaceTestScenario(iTestScenario));
                for (IfaceExecBlock iExecutionBlock : iTestScenario.getIfaceExecBlock()) {
                    DefaultMutableTreeNode nodeInterfaceExecutionBlock = new DefaultMutableTreeNode(new GUIObjects.InterfaceExecutionBlock(iExecutionBlock));
                    ExecutionBlock executionBlock;
                    try {
                        executionBlock = MCFG.getExecutionBlock(iFlowPattern.getRefId(), iTestScenario.getRefId(), iExecutionBlock.getRefId());
                    } catch (FrameworkConfigurationException ex) {
                        logger.error("Can't load execution block", ex);
                        resetInterfaceDetails();
                        return;
                    }
                    for (Operation operation : executionBlock.getOperation()) {
                        DefaultMutableTreeNode nodeOperation = new DefaultMutableTreeNode(new GUIObjects.Operation(operation));
                        nodeInterfaceExecutionBlock.add(nodeOperation);
                    }
                    nodeInterfaceTestScenario.add(nodeInterfaceExecutionBlock);
                }
                nodeInterfaceFlowPattern.add(nodeInterfaceTestScenario);
            }
            nodePatterns.add(nodeInterfaceFlowPattern);
        }
        nodeInterface.add(nodePatterns);
        
        
        DefaultTreeModel defaultTreeModel = new DefaultTreeModel(nodeInterface);
        details.setModel(defaultTreeModel);
    }

    private void resetInterfaceDetails() {
        details.setModel(new DefaultTreeModel(null));
    }

    private void initEnvironments() {
        final DefaultComboBoxModel model = new DefaultComboBoxModel(getListOfEnvironments());
        cbEnvironment.setModel(model);
    }
    
    private void updateLastRow(FlowExecutionEvent evt) {
        Result result = new Result(evt.getOperationName());
        result.setMessages(evt.getOperationResult().getMessages());
        result.setSuccess(evt.getOperationResult().isSuccessful());
        jtResultsModel.updateLastRow(result);
    }
    
    private void addRow(FlowExecutionEvent evt) {
        jtResultsModel.addRow(new Result(evt.getOperationName()));
    }

    private FlowExecutor buildFlowExecutor() throws FrameworkConfigurationException {
        String interfaceId = jlInterfaces.getSelectedValue().getWrappedObject().getName();
        String envName = cbEnvironment.getSelectedItem().toString();
        boolean ignoreFailures = chkBoxIgnoreFailures.isSelected();
        FlowExecutor flowExecutor = new FlowExecutor(envName, interfaceId);
        TreePath selectionPath = details.getSelectionPath();
        if (selectionPath == null) {
            return flowExecutor;
        }
        
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) selectionPath.getLastPathComponent();
        while (node != null) {
            Object userObject = node.getUserObject();
            if (userObject instanceof GUIObjects.Project) {
                boolean inboundOnly = "INBOUND".equalsIgnoreCase(((GUIObjects.Project)userObject).getWrappedObject().getDirection());
                flowExecutor = new FlowExecutor(inboundOnly, envName, interfaceId);
                break;
            } else if (userObject instanceof GUIObjects.Operation) {
                flowExecutor.setOperation(((GUIObjects.Operation)userObject).getWrappedObject());
            } else if (userObject instanceof GUIObjects.InterfaceExecutionBlock) {
                flowExecutor.setIfaceExecutionBlock(((GUIObjects.InterfaceExecutionBlock)userObject).getWrappedObject());
            } else if (userObject instanceof GUIObjects.InterfaceTestScenario) {
                flowExecutor.setIfaceTestScenario(((GUIObjects.InterfaceTestScenario)userObject).getWrappedObject());
            } else if (userObject instanceof GUIObjects.IfaceFlowPattern) {
                flowExecutor.setIfaceFlowPattern(((GUIObjects.IfaceFlowPattern)userObject).getWrappedObject());
            }
            node = (DefaultMutableTreeNode) node.getParent();
        }
 
        return flowExecutor;
    }

    private void clearAll() {
        clearLogs();
        clearResults();
    }

    private void clearLogs() {
        jtaLogging.setText("");
    }
    
    private void clearResults() {
        jtResultsModel.clear();
    }
    
    private void displayResultDetails() {
        int rowIdx = jtResults.getSelectedRow();
        Result result = jtResultsModel.getRow(rowIdx);
                
        JDialog dialog = new ResultsDetailDialog(this, true, result);
        dialog.setVisible(true);
    }

    private void reloadXMLConfiguration() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private class ExecuteTask extends AsyncTask {
        private final Logger logger = LogManager.getLogger(ExecuteTask.class);
        private final FlowExecutor flowExecutor;

        public ExecuteTask(FlowExecutor flowExecutor) {
            this.flowExecutor = flowExecutor;
        }
        
        @Override
        public void success(Object o) {
            logger.info("Execution finished");
            btnExecute.setEnabled(true);
        }

        @Override
        public void failure(Throwable thrwbl) {
            logger.info("Execution finished with following exception: ", thrwbl);
            btnExecute.setEnabled(true);
        }

        @Override
        public Object run() throws Exception {
            btnExecute.setEnabled(false);
            try {
                flowExecutor.execute();
            } catch (RuntimeException e) {
                throw new FrameworkExecutionException(e);
            }
            return null;
        }
        
    }
}
